// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FunctionReference function-accepting-callback 1`] = `
"; ModuleID = 'function-reference/function-accepting-callback.ts'
source_filename = \\"function-reference/function-accepting-callback.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }
%class.Array = type { i32*, i32*, i32 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object
@items = private local_unnamed_addr constant [5 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5]

define %class.Array* @_functionAcceptingCallback() {
entry:
  %items = alloca [5 x i32], align 4
  %array = alloca %class.Array*, align 4
  %return = alloca %class.Array*, align 4
  %items1 = getelementptr inbounds [5 x i32], [5 x i32]* %items, i32 0, i32 0
  %0 = bitcast [5 x i32]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([5 x i32]* @items to i8*), i32 20, i32 0, i1 false)
  %constructorReturnValue = call dereferenceable(12) %class.Array* @ArrayIi_constructorPiu(i32* %items1, i32 5)
  store %class.Array* %constructorReturnValue, %class.Array** %array, align 4
  %array2 = load %class.Array*, %class.Array** %array, align 4
  %filterReturnValue = call dereferenceable(12) %class.Array* @\\"function_reference/function_accepting_callback.ts$$6filter5ArrayIiPFbi\\"(%class.Array* %array2, i1 (i32)* @\\"function_reference/function_accepting_callback.ts$$6isEveni\\")
  store %class.Array* %filterReturnValue, %class.Array** %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load %class.Array*, %class.Array** %return, align 4
  ret %class.Array* %return3
}

; Function Attrs: alwaysinline
declare dereferenceable(12) %class.Array* @ArrayIi_constructorPiu(i32*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #1

define linkonce_odr hidden zeroext i1 @\\"function_reference/function_accepting_callback.ts$$6isEveni\\"(i32 %x) {
entry:
  %x.addr = alloca i32, align 4
  %return = alloca i1, align 1
  store i32 %x, i32* %x.addr, align 4
  %x.addr1 = load i32, i32* %x.addr, align 4
  %srem = srem i32 %x.addr1, 2
  %cmpEQ = icmp eq i32 %srem, 0
  store i1 %cmpEQ, i1* %return, align 1
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return2 = load i1, i1* %return, align 1
  ret i1 %return2
}

define linkonce_odr hidden dereferenceable(12) %class.Array* @\\"function_reference/function_accepting_callback.ts$$6filter5ArrayIiPFbi\\"(%class.Array* dereferenceable(12) %array, i1 (i32)* %pred) {
entry:
  %items = alloca [1 x i32], align 4
  %i = alloca i32, align 4
  %result = alloca %class.Array*, align 4
  %pred.addr = alloca i1 (i32)*, align 4
  %array.addr = alloca %class.Array*, align 4
  %return = alloca %class.Array*, align 4
  store %class.Array* %array, %class.Array** %array.addr, align 4
  store i1 (i32)* %pred, i1 (i32)** %pred.addr, align 4
  %constructorReturnValue = call dereferenceable(12) %class.Array* @ArrayIi_constructorPiu(i32* null, i32 0)
  store %class.Array* %constructorReturnValue, %class.Array** %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i1 = load i32, i32* %i, align 4
  %array.addr2 = load %class.Array*, %class.Array** %array.addr, align 4
  %length = call i32 @ArrayIi_length(%class.Array* %array.addr2)
  %cmpLT = icmp slt i32 %i1, %length
  br i1 %cmpLT, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %pred.addr3 = load i1 (i32)*, i1 (i32)** %pred.addr, align 4
  %array.addr4 = load %class.Array*, %class.Array** %array.addr, align 4
  %i5 = load i32, i32* %i, align 4
  %\\"[i]\\" = call i32 @ArrayIi_geti(%class.Array* %array.addr4, i32 %i5)
  %0 = call i1 %pred.addr3(i32 %\\"[i]\\")
  br i1 %0, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %array.addr6 = load %class.Array*, %class.Array** %array.addr, align 4
  %i7 = load i32, i32* %i, align 4
  %\\"[i]8\\" = call i32 @ArrayIi_geti(%class.Array* %array.addr6, i32 %i7)
  %result9 = load %class.Array*, %class.Array** %result, align 4
  %items10 = getelementptr inbounds [1 x i32], [1 x i32]* %items, i32 0, i32 0
  %1 = getelementptr inbounds [1 x i32], [1 x i32]* %items, i32 0, i32 0
  store i32 %\\"[i]8\\", i32* %1, align 4
  %pushReturnValue = call i32 @ArrayIi_pushPiu(%class.Array* %result9, i32* %items10, i32 1)
  br label %if.end

if.end:                                           ; preds = %for.body, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %i11 = load i32, i32* %i, align 4
  %add = add i32 %i11, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %result12 = load %class.Array*, %class.Array** %result, align 4
  store %class.Array* %result12, %class.Array** %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %for.end
  %return13 = load %class.Array*, %class.Array** %return, align 4
  ret %class.Array* %return13
}

; Function Attrs: alwaysinline nounwind readonly
declare i32 @ArrayIi_length(%class.Array* nocapture readonly dereferenceable(12)) #2

; Function Attrs: alwaysinline
declare void @ArrayIi_lengthi(%class.Array* dereferenceable(12), i32) #0

; Function Attrs: alwaysinline norecurse nounwind readonly
declare i32 @ArrayIi_geti(%class.Array* nocapture dereferenceable(12), i32) #3

; Function Attrs: alwaysinline
declare void @ArrayIi_setii(%class.Array* nocapture dereferenceable(12), i32, i32) #0

; Function Attrs: alwaysinline
declare i32 @ArrayIi_pushPiu(%class.Array* readonly dereferenceable(12), i32*, i32) #0

declare void @speedyJsGc()

attributes #0 = { alwaysinline }
attributes #1 = { argmemonly nounwind }
attributes #2 = { alwaysinline nounwind readonly }
attributes #3 = { alwaysinline norecurse nounwind readonly }
"
`;

exports[`FunctionReference variable-to-function-reference 1`] = `
"; ModuleID = 'function-reference/variable-to-function-reference.ts'
source_filename = \\"function-reference/variable-to-function-reference.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define double @_initializedVariableDeclaration() {
entry:
  %fn = alloca double (double, double)*, align 4
  %return = alloca double, align 8
  store double (double, double)* @\\"function_reference/variable_to_function_reference.ts$$3adddd\\", double (double, double)** %fn, align 4
  %fn1 = load double (double, double)*, double (double, double)** %fn, align 4
  %addReturnValue = call double %fn1(double 3.000000e+00, double 4.000000e+00)
  store double %addReturnValue, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return2 = load double, double* %return, align 8
  ret double %return2
}

define linkonce_odr hidden double @\\"function_reference/variable_to_function_reference.ts$$3adddd\\"(double %x, double %y) {
entry:
  %y.addr = alloca double, align 8
  %x.addr = alloca double, align 8
  %return = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  %x.addr1 = load double, double* %x.addr, align 8
  %y.addr2 = load double, double* %y.addr, align 8
  %fadd = fadd double %x.addr1, %y.addr2
  store double %fadd, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load double, double* %return, align 8
  ret double %return3
}
"
`;
