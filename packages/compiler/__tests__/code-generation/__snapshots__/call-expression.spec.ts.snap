// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CallExpression arguments-evaluation-order 1`] = `
"; ModuleID = 'call-expression/arguments-evaluation-order.ts'
source_filename = \\"call-expression/arguments-evaluation-order.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }
%class.Array = type { double*, double*, i32 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define double @_argumentsEvaluationOrder(%class.Array* %points, i32 %index) {
entry:
  %index.addr = alloca i32, align 4
  %points.addr = alloca %class.Array*, align 4
  %return = alloca double, align 8
  store %class.Array* %points, %class.Array** %points.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %points.addr1 = load %class.Array*, %class.Array** %points.addr, align 4
  %index.addr2 = load i32, i32* %index.addr, align 4
  %\\"[i]\\" = call double @ArrayId_geti(%class.Array* %points.addr1, i32 %index.addr2)
  %index.addr3 = load i32, i32* %index.addr, align 4
  %add = add i32 %index.addr3, 1
  %points.addr4 = load %class.Array*, %class.Array** %points.addr, align 4
  %\\"[i]5\\" = call double @ArrayId_geti(%class.Array* %points.addr4, i32 %add)
  %euclideanDistanceReturnValue = call double @\\"call_expression/arguments_evaluation_order.ts$$17euclideanDistancedddd\\"(double 0.000000e+00, double 0.000000e+00, double %\\"[i]\\", double %\\"[i]5\\")
  store double %euclideanDistanceReturnValue, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return6 = load double, double* %return, align 8
  ret double %return6
}

; Function Attrs: alwaysinline norecurse nounwind readonly
declare double @ArrayId_geti(%class.Array* nocapture dereferenceable(12), i32) #0

; Function Attrs: alwaysinline
declare void @ArrayId_setid(%class.Array* nocapture dereferenceable(12), i32, double) #1

define linkonce_odr hidden double @\\"call_expression/arguments_evaluation_order.ts$$17euclideanDistancedddd\\"(double %x1, double %y1, double %x2, double %y2) {
entry:
  %y2.addr = alloca double, align 8
  %x2.addr = alloca double, align 8
  %y1.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  %return = alloca double, align 8
  store double %x1, double* %x1.addr, align 8
  store double %y1, double* %y1.addr, align 8
  store double %x2, double* %x2.addr, align 8
  store double %y2, double* %y2.addr, align 8
  %x1.addr1 = load double, double* %x1.addr, align 8
  %x2.addr2 = load double, double* %x2.addr, align 8
  %fsub = fsub double %x1.addr1, %x2.addr2
  %mathPtr = load %class.Math*, %class.Math** @Math_ptr, align 4
  %powReturnValue = call double @Math_powdd(%class.Math* %mathPtr, double %fsub, double 2.000000e+00)
  %y1.addr3 = load double, double* %y1.addr, align 8
  %y2.addr4 = load double, double* %y2.addr, align 8
  %fsub5 = fsub double %y1.addr3, %y2.addr4
  %mathPtr6 = load %class.Math*, %class.Math** @Math_ptr, align 4
  %powReturnValue7 = call double @Math_powdd(%class.Math* %mathPtr6, double %fsub5, double 2.000000e+00)
  %fadd = fadd double %powReturnValue, %powReturnValue7
  %mathPtr8 = load %class.Math*, %class.Math** @Math_ptr, align 4
  %sqrtReturnValue = call double @Math_sqrtd(%class.Math* %mathPtr8, double %fadd)
  store double %sqrtReturnValue, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return9 = load double, double* %return, align 8
  ret double %return9
}

; Function Attrs: alwaysinline nounwind readnone
declare double @Math_powdd(%class.Math* readonly dereferenceable(1), double, double) #2

; Function Attrs: alwaysinline nounwind readnone
declare double @Math_sqrtd(%class.Math* readonly dereferenceable(1), double) #2

attributes #0 = { alwaysinline norecurse nounwind readonly }
attributes #1 = { alwaysinline }
attributes #2 = { alwaysinline nounwind readnone }
"
`;

exports[`CallExpression array-passing-function-call 1`] = `
"; ModuleID = 'call-expression/array-passing-function-call.ts'
source_filename = \\"call-expression/array-passing-function-call.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }
%class.Array = type { i32*, i32*, i32 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object
@items = private local_unnamed_addr constant [5 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5]

define i32 @_passesArray() {
entry:
  %items = alloca [5 x i32], align 4
  %array = alloca %class.Array*, align 4
  %return = alloca i32, align 4
  %items1 = getelementptr inbounds [5 x i32], [5 x i32]* %items, i32 0, i32 0
  %0 = bitcast [5 x i32]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([5 x i32]* @items to i8*), i32 20, i32 0, i1 false)
  %constructorReturnValue = call dereferenceable(12) %class.Array* @ArrayIi_constructorPiu(i32* %items1, i32 5)
  store %class.Array* %constructorReturnValue, %class.Array** %array, align 4
  %array2 = load %class.Array*, %class.Array** %array, align 4
  %arrayLengthReturnValue = call i32 @\\"call_expression/array_passing_function_call.ts$$11arrayLength5ArrayIi\\"(%class.Array* %array2)
  store i32 %arrayLengthReturnValue, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load i32, i32* %return, align 4
  ret i32 %return3
}

; Function Attrs: alwaysinline
declare dereferenceable(12) %class.Array* @ArrayIi_constructorPiu(i32*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #1

define linkonce_odr hidden i32 @\\"call_expression/array_passing_function_call.ts$$11arrayLength5ArrayIi\\"(%class.Array* dereferenceable(12) %array) {
entry:
  %array.addr = alloca %class.Array*, align 4
  %return = alloca i32, align 4
  store %class.Array* %array, %class.Array** %array.addr, align 4
  %array.addr1 = load %class.Array*, %class.Array** %array.addr, align 4
  %length = call i32 @ArrayIi_length(%class.Array* %array.addr1)
  store i32 %length, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return2 = load i32, i32* %return, align 4
  ret i32 %return2
}

; Function Attrs: alwaysinline nounwind readonly
declare i32 @ArrayIi_length(%class.Array* nocapture readonly dereferenceable(12)) #2

; Function Attrs: alwaysinline
declare void @ArrayIi_lengthi(%class.Array* dereferenceable(12), i32) #0

declare void @speedyJsGc()

attributes #0 = { alwaysinline }
attributes #1 = { argmemonly nounwind }
attributes #2 = { alwaysinline nounwind readonly }
"
`;

exports[`CallExpression implicit-call-arguments-type-coercion 1`] = `
"; ModuleID = 'call-expression/implicit-call-arguments-type-coercion.ts'
source_filename = \\"call-expression/implicit-call-arguments-type-coercion.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define double @_implicitCallArgumentsTypeCoercion(i32 %value) {
entry:
  %value.addr = alloca i32, align 4
  %return = alloca double, align 8
  store i32 %value, i32* %value.addr, align 4
  %value.addr1 = load i32, i32* %value.addr, align 4
  %value.addr1AsNumber = sitofp i32 %value.addr1 to double
  %mathPtr = load %class.Math*, %class.Math** @Math_ptr, align 4
  %sqrtReturnValue = call double @Math_sqrtd(%class.Math* %mathPtr, double %value.addr1AsNumber)
  store double %sqrtReturnValue, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return2 = load double, double* %return, align 8
  ret double %return2
}

; Function Attrs: alwaysinline nounwind readnone
declare double @Math_sqrtd(%class.Math* readonly dereferenceable(1), double) #0

attributes #0 = { alwaysinline nounwind readnone }
"
`;

exports[`CallExpression simple-function-call 1`] = `
"; ModuleID = 'call-expression/simple-function-call.ts'
source_filename = \\"call-expression/simple-function-call.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define i32 @_fib(i32 %value) {
entry:
  %value.addr = alloca i32, align 4
  %return = alloca i32, align 4
  store i32 %value, i32* %value.addr, align 4
  %value.addr1 = load i32, i32* %value.addr, align 4
  %fibSyncReturnValue = call i32 @\\"call_expression/simple_function_call.ts$$7fibSynci\\"(i32 %value.addr1)
  store i32 %fibSyncReturnValue, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return2 = load i32, i32* %return, align 4
  ret i32 %return2
}

define linkonce_odr hidden i32 @\\"call_expression/simple_function_call.ts$$7fibSynci\\"(i32 %value) {
entry:
  %value.addr = alloca i32, align 4
  %return = alloca i32, align 4
  store i32 %value, i32* %value.addr, align 4
  %value.addr1 = load i32, i32* %value.addr, align 4
  %cmpLE = icmp sle i32 %value.addr1, 2
  br i1 %cmpLE, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %return, align 4
  br label %returnBlock

if.end:                                           ; preds = %entry
  %value.addr2 = load i32, i32* %value.addr, align 4
  %sub = sub i32 %value.addr2, 2
  %fibSyncReturnValue = call i32 @\\"call_expression/simple_function_call.ts$$7fibSynci\\"(i32 %sub)
  %value.addr3 = load i32, i32* %value.addr, align 4
  %sub4 = sub i32 %value.addr3, 1
  %fibSyncReturnValue5 = call i32 @\\"call_expression/simple_function_call.ts$$7fibSynci\\"(i32 %sub4)
  %add = add i32 %fibSyncReturnValue, %fibSyncReturnValue5
  store i32 %add, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %if.end, %if.then
  %return6 = load i32, i32* %return, align 4
  ret i32 %return6
}
"
`;

exports[`CallExpression varargs-implicit-type-coercion 1`] = `
"; ModuleID = 'call-expression/varargs-implicit-type-coercion.ts'
source_filename = \\"call-expression/varargs-implicit-type-coercion.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }
%class.Array = type { double*, double*, i32 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object
@items = private local_unnamed_addr constant [10 x double] [double 1.100000e+00, double 1.200000e+00, double 1.300000e+00, double 1.400000e+00, double 1.500000e+00, double 1.600000e+00, double 1.700000e+00, double 1.800000e+00, double 1.900000e+00, double 2.000000e+00]

define void @_varargsImplicitTypeCoercion(%class.Array* %array) {
entry:
  %items = alloca [10 x double], align 8
  %array.addr = alloca %class.Array*, align 4
  store %class.Array* %array, %class.Array** %array.addr, align 4
  %array.addr1 = load %class.Array*, %class.Array** %array.addr, align 4
  %items2 = getelementptr inbounds [10 x double], [10 x double]* %items, i32 0, i32 0
  %0 = bitcast [10 x double]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([10 x double]* @items to i8*), i32 80, i32 0, i1 false)
  %pushReturnValue = call i32 @ArrayId_pushPdu(%class.Array* %array.addr1, double* %items2, i32 10)
  ret void
}

; Function Attrs: alwaysinline
declare i32 @ArrayId_pushPdu(%class.Array* readonly dereferenceable(12), double*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #1

attributes #0 = { alwaysinline }
attributes #1 = { argmemonly nounwind }
"
`;
