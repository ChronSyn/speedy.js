// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`VariableDeclaration implicit-type-coercion 1`] = `
"; ModuleID = 'variable-declaration/implicit-type-coercion.ts'
source_filename = \\"variable-declaration/implicit-type-coercion.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define void @_initializerWithImplicitTypeCoercion() {
entry:
  %x = alloca double, align 8
  store double 1.000000e+01, double* %x, align 8
  ret void
}
"
`;

exports[`VariableDeclaration initialize-empty-array 1`] = `
"; ModuleID = 'variable-declaration/initialize-empty-array.ts'
source_filename = \\"variable-declaration/initialize-empty-array.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }
%class.Array = type { i32*, i32*, i32 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define void @_initializeEmptyArray() {
entry:
  %x = alloca %class.Array*, align 4
  %constructorReturnValue = call dereferenceable(12) %class.Array* @ArrayIi_constructorPiu(i32* null, i32 0)
  store %class.Array* %constructorReturnValue, %class.Array** %x, align 4
  ret void
}

; Function Attrs: alwaysinline
declare dereferenceable(12) %class.Array* @ArrayIi_constructorPiu(i32*, i32) #0

declare void @speedyJsGc()

attributes #0 = { alwaysinline }
"
`;

exports[`VariableDeclaration initialized 1`] = `
"; ModuleID = 'variable-declaration/initialized.ts'
source_filename = \\"variable-declaration/initialized.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define void @_initializedVariableDeclaration() {
entry:
  %x = alloca i32, align 4
  store i32 10, i32* %x, align 4
  ret void
}
"
`;

exports[`VariableDeclaration undefined-primitive-variable 1`] = `
"; ModuleID = 'variable-declaration/undefined-primitive-variable.ts'
source_filename = \\"variable-declaration/undefined-primitive-variable.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define void @_undefinedPrimitiveVariable() {
entry:
  %x = alloca double, align 8
  store double 0x7FF8000000000000, double* %x, align 8
  ret void
}
"
`;

exports[`VariableDeclaration uninitialized 1`] = `
"; ModuleID = 'variable-declaration/uninitialized.ts'
source_filename = \\"variable-declaration/uninitialized.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define void @_uninitializedVariableDeclaration() {
entry:
  %x = alloca double, align 8
  ret void
}
"
`;

exports[`VariableDeclaration unsupported-var-declaration-error 1`] = `
"__tests__/code-generation/cases/variable-declaration/unsupported-var-declaration-error.ts(2,20): error TS1000029: Unsupported 'var' declaration of variable. Only variables with block scope ('let' and 'const') are supported.
"
`;

exports[`VariableDeclaration variable-of-function-type 1`] = `
"; ModuleID = 'variable-declaration/variable-of-function-type.ts'
source_filename = \\"variable-declaration/variable-of-function-type.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define double @_initializedVariableDeclaration() {
entry:
  %fn = alloca double (double, double)*, align 4
  %return = alloca double, align 8
  store double (double, double)* @\\"variable_declaration/variable_of_function_type.ts$$3adddd\\", double (double, double)** %fn, align 4
  %fn1 = load double (double, double)*, double (double, double)** %fn, align 4
  %addReturnValue = call double %fn1(double 3.000000e+00, double 4.000000e+00)
  store double %addReturnValue, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return2 = load double, double* %return, align 8
  ret double %return2
}

define linkonce_odr hidden double @\\"variable_declaration/variable_of_function_type.ts$$3adddd\\"(double %x, double %y) {
entry:
  %y.addr = alloca double, align 8
  %x.addr = alloca double, align 8
  %return = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  %x.addr1 = load double, double* %x.addr, align 8
  %y.addr2 = load double, double* %y.addr, align 8
  %fadd = fadd double %x.addr1, %y.addr2
  store double %fadd, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load double, double* %return, align 8
  ret double %return3
}
"
`;
