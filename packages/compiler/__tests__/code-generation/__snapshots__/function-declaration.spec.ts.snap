// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FunctionDeclaration branched-function-returning-void 1`] = `
"; ModuleID = 'function-declaration/branched-function-returning-void.ts'
source_filename = \\"function-declaration/branched-function-returning-void.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define void @_branchedFunctionReturningVoid(i32 %arg) {
entry:
  %count = alloca i32, align 4
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %arg.addr1 = load i32, i32* %arg.addr, align 4
  %cmpGT = icmp sgt i32 %arg.addr1, 10
  br i1 %cmpGT, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %count, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %arg.addr2 = load i32, i32* %arg.addr, align 4
  store i32 %arg.addr2, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %count3 = load i32, i32* %count, align 4
  %add = add i32 %count3, 1
  store i32 %add, i32* %count, align 4
  ret void
}
"
`;

exports[`FunctionDeclaration branched-function-with-return-value 1`] = `
"; ModuleID = 'function-declaration/branched-function-with-return-value.ts'
source_filename = \\"function-declaration/branched-function-with-return-value.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define i1 @_isPrime(i32 %x) {
entry:
  %x.addr = alloca i32, align 4
  %return = alloca i1, align 1
  store i32 %x, i32* %x.addr, align 4
  %x.addr1 = load i32, i32* %x.addr, align 4
  %cmpLE = icmp sle i32 %x.addr1, 2
  br i1 %cmpLE, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* %return, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  store i1 false, i1* %return, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %if.else
  %return2 = load i1, i1* %return, align 1
  ret i1 %return2
}
"
`;

exports[`FunctionDeclaration closures-error 1`] = `
"__tests__/code-generation/cases/function-declaration/closures-error.ts(2,20): error TS1000027: Functions nested inside of other functions that potentially make use of a closure are not yet supported
"
`;

exports[`FunctionDeclaration generic-entry-function-error 1`] = `
"__tests__/code-generation/cases/function-declaration/generic-entry-function-error.ts(1,1): error TS100012: Generic SpeedyJS entry functions are not supported.
"
`;

exports[`FunctionDeclaration generic-function-error 1`] = `
"__tests__/code-generation/cases/function-declaration/generic-function-error.ts(5,2): error TS1000025: Generic functions and methods are not yet supported.
"
`;

exports[`FunctionDeclaration overloaded-entry-function-error 1`] = `
"__tests__/code-generation/cases/function-declaration/overloaded-entry-function-error.ts(2,51): error TS100013: SpeedyJS entry function cannot be overloaded.
"
`;

exports[`FunctionDeclaration overloaded-function-error 1`] = `
"__tests__/code-generation/cases/function-declaration/overloaded-function-error.ts(10,42): error TS1000030: Overloaded functions are not yet supported.
"
`;

exports[`FunctionDeclaration return-with-implicit-value-coercion 1`] = `
"; ModuleID = 'function-declaration/return-with-implicit-value-coercion.ts'
source_filename = \\"function-declaration/return-with-implicit-value-coercion.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define double @_returnWithImplicitReturnValueCoercion(i32 %arg) {
entry:
  %arg.addr = alloca i32, align 4
  %return = alloca double, align 8
  store i32 %arg, i32* %arg.addr, align 4
  %arg.addr1 = load i32, i32* %arg.addr, align 4
  %arg.addr1AsNumber = sitofp i32 %arg.addr1 to double
  store double %arg.addr1AsNumber, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return2 = load double, double* %return, align 8
  ret double %return2
}
"
`;

exports[`FunctionDeclaration variadic-function 1`] = `
"; ModuleID = 'function-declaration/variadic-function.ts'
source_filename = \\"function-declaration/variadic-function.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }
%class.Array = type { double*, double*, i32 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object
@others = private local_unnamed_addr constant [3 x double] [double 2.300000e+00, double 8.900000e+00, double 3.200000e+00]

define double @_variadicFunctionEntry() {
entry:
  %others = alloca [3 x double], align 8
  %return = alloca double, align 8
  %others1 = getelementptr inbounds [3 x double], [3 x double]* %others, i32 0, i32 0
  %0 = bitcast [3 x double]* %others to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([3 x double]* @others to i8*), i32 24, i32 0, i1 false)
  %variadicFunctionReturnValue = call double @\\"function_declaration/variadic_function.ts$$16variadicFunctiond5ArrayId\\"(double 1.200000e+00, double* %others1, i32 3)
  store double %variadicFunctionReturnValue, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return2 = load double, double* %return, align 8
  ret double %return2
}

define linkonce_odr hidden double @\\"function_declaration/variadic_function.ts$$16variadicFunctiond5ArrayId\\"(double %first, double* %others, i32) {
entry:
  %i = alloca i32, align 4
  %max = alloca double, align 8
  %others.addr = alloca %class.Array*, align 4
  %first.addr = alloca double, align 8
  %return = alloca double, align 8
  store double %first, double* %first.addr, align 8
  %1 = call %class.Array* @ArrayId_constructorPdu(double* %others, i32 %0)
  store %class.Array* %1, %class.Array** %others.addr, align 4
  %first.addr1 = load double, double* %first.addr, align 8
  store double %first.addr1, double* %max, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i2 = load i32, i32* %i, align 4
  %others.addr3 = load %class.Array*, %class.Array** %others.addr, align 4
  %length = call i32 @ArrayId_length(%class.Array* %others.addr3)
  %cmpLT = icmp slt i32 %i2, %length
  br i1 %cmpLT, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %others.addr4 = load %class.Array*, %class.Array** %others.addr, align 4
  %i5 = load i32, i32* %i, align 4
  %\\"[i]\\" = call double @ArrayId_geti(%class.Array* %others.addr4, i32 %i5)
  %others.addr6 = load %class.Array*, %class.Array** %others.addr, align 4
  %i7 = load i32, i32* %i, align 4
  %\\"[i]8\\" = call double @ArrayId_geti(%class.Array* %others.addr6, i32 %i7)
  %cmpLT9 = fcmp olt double %\\"[i]\\", %\\"[i]8\\"
  br i1 %cmpLT9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %others.addr10 = load %class.Array*, %class.Array** %others.addr, align 4
  %i11 = load i32, i32* %i, align 4
  %\\"[i]12\\" = call double @ArrayId_geti(%class.Array* %others.addr10, i32 %i11)
  store double %\\"[i]12\\", double* %max, align 8
  br label %if.end

if.end:                                           ; preds = %for.body, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %i13 = load i32, i32* %i, align 4
  %add = add i32 %i13, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %max14 = load double, double* %max, align 8
  store double %max14, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %for.end
  %return15 = load double, double* %return, align 8
  ret double %return15
}

; Function Attrs: alwaysinline
declare %class.Array* @ArrayId_constructorPdu(double*, i32) #0

; Function Attrs: alwaysinline nounwind readonly
declare i32 @ArrayId_length(%class.Array* nocapture readonly dereferenceable(12)) #1

; Function Attrs: alwaysinline
declare void @ArrayId_lengthi(%class.Array* dereferenceable(12), i32) #0

; Function Attrs: alwaysinline norecurse nounwind readonly
declare double @ArrayId_geti(%class.Array* nocapture dereferenceable(12), i32) #2

; Function Attrs: alwaysinline
declare void @ArrayId_setid(%class.Array* nocapture dereferenceable(12), i32, double) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #3

attributes #0 = { alwaysinline }
attributes #1 = { alwaysinline nounwind readonly }
attributes #2 = { alwaysinline norecurse nounwind readonly }
attributes #3 = { argmemonly nounwind }
"
`;

exports[`FunctionDeclaration void-function-with-return-statement 1`] = `
"; ModuleID = 'function-declaration/void-function-with-return-statement.ts'
source_filename = \\"function-declaration/void-function-with-return-statement.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define void @_voidFunctionWithReturnStatement(i32 %arg) {
entry:
  %count = alloca i32, align 4
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %arg.addr1 = load i32, i32* %arg.addr, align 4
  %cmpLT = icmp slt i32 %arg.addr1, 10
  br i1 %cmpLT, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %returnBlock

if.end:                                           ; preds = %entry
  %arg.addr2 = load i32, i32* %arg.addr, align 4
  store i32 %arg.addr2, i32* %count, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %if.end, %if.then
  ret void
}
"
`;
